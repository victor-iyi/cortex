[project]
name = "cortex"
version = "0.3.2"
description = "Cortex is an API for communicating with your Emotiv EEG device."
license = "MIT"

authors = [{name="Victor I. Afolabi", email="javafolabi@gmail.com"}]
maintainers = [{name="Victor I. Afolabi", email="javafolabi@gmail.com"}]

readme = "README.md"
keywords = ["bci", "emotiv", "eeg", "neuroscience"]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.11"

dependencies = [
# Lightweight Event Handling.
  "python-dispatch>=0.2.2",
# Read key-value pair from a .env files and set them as environment variables.
  "python-dotenv>=1.0.1",
# Render rich text, progress bars, syntax highlighting and more to the terminal
  "rich>=13.9.2",
# WebSocket client for Python with low level API options.
  "websocket-client>=1.8.0",
]

[project.urls]
repository = "https://github.com/victor-iyi/cortex"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
# Simple powerful testing with Python.
  "pytest>=8.3.3",
# A pytest plugin that adds emojis to your test result report.
  "pytest-emoji>=0.2.0",
# Plugin for generating Markdown reports for pytest results.
  "pytest-md>=0.2.0",
# Formats docstring to follow PEP 257.
  "docformatter[tomli]>=1.7.5",
# Optional static typing for Python.
  "mypy>=1.11.2",
# Managing and maintaining pre-commit hooks.
  "pre-commit>=4.0.0",
# Fast Python linter and code formatter.
  "ruff>=0.6.9",
]

# Docformatter.
[tool.docformatter]
in-place = true
recursive = true
blank = true
close-quotes-on-newline = true
wrap-summaries = 120
wrap-descriptions = 120

# Style hinting.
[tool.mypy]
files = ["src/", "examples/"]
exclude = ["tests/", "venv/", ".venv/"]
namespace_packages = true
explicit_package_bases = true
strict = true
check_untyped_defs = true
ignore_missing_imports = true
disallow_any_generics = true
disallow_incomplete_defs = true
implicit_reexport = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
warn_unused_configs = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
disallow_subclassing_any = false
disallow_untyped_decorators = false

[tool.pyright]
reportArgumentType = "none"
reportGeneralTypeIssues = "none"
reportOptionalCall = "none"
reportOptionalMemberAccess = "none"
reportUnboundVariable = "none"

[tool.ruff]
fix = true
line-length = 120
show-fixes = true
extend-exclude = ["src/cortex/deprecated/*.py"]

[tool.ruff.format]
quote-style = "single"
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
  # pycodestyle
  "E",
  # pydocstyle
  "D",
  # pyupgrade
  "UP",
]

extend-select = [
  # pydocstyle
  # One-line docstring should fit on one line.
  "D200",
  # Multi-line docstring summary should start at the first line.
  "D212",
  # Use triple double quotes """.
  "D300",
  # First word of the first line should be capitalized: {} -> {}.
  "D403",
  # First line should end with a period, question mark, or exclamation point
  "D415",
]

ignore = [
  # pydocstyle
  # Missing docstring in public package.
  "D104",
]

logger-objects = ["cortex.logging.logger"]
typing-modules = ["cortex.api.types"]

[tool.ruff.lint.pydocstyle]
convention = "google"
