[tool.poetry]
name = "cortex"
version = "0.2.2"
description = "Cortex is an API for communicating with your emotiv EEG device."
license = "MIT"

authors = ["Victor I. Afolabi <javafolabi@gmail.com>"]
maintainers = ["Victor I. Afolabi <javafolabi@gmail.com>"]

readme = "README.md"
repository = "https://github.com/victor-iyi/cortex"
keywords = ["bci", "emotiv", "eeg", "neuroscience"]

classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

packages = [{ include = "cortex", from = "src" }]

[tool.poetry.dependencies]
python = "^3.11"

# WebSocket client for Python with low level API options.
websocket-client = "^1.5.1"
# Lightweight Event Handling.
python-dispatch = "^0.2.1"
# Render rich text, progress bars, syntax highlighting and more to the terminal
rich = "^13.7.1"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
# Optional static typing for Python.
mypy = "^1.0.1"
# Managing and maintaining pre-commit hooks.
pre-commit = "^3.1.0"
# Formats docstring to follow PEP 257.
docformatter = { version = "^1.5.1", extras = ["tomli"] }
# Fast Python linter and code formatter.
ruff = "^0.6.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Docformatter.
[tool.docformatter]
in-place = true
recursive = true
blank = true
close-quotes-on-newline = true

# Style hinting.
[tool.mypy]
files = ["src/", "examples/"]
exclude = ["tests/", "venv/", ".venv/"]
namespace_packages = true
explicit_package_bases = true
strict = true
check_untyped_defs = true
ignore_missing_imports = true
disallow_any_generics = true
disallow_incomplete_defs = true
implicit_reexport = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
warn_unused_configs = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
disallow_subclassing_any = false
disallow_untyped_decorators = false

[tool.pyright]
reportArgumentType = "none"
reportGeneralTypeIssues = "none"
reportOptionalCall = "none"
reportOptionalMemberAccess = "none"
reportUnboundVariable = "none"

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = [
  # pycodestyle
  "E",
  # # pydocstyle
  # "D",
  # pyupgrade
  "UP",
]

extend-select = [
  # # pydocstyle
  # # Missing docstring in public module.
  # "D100",
  # # Missing docstring in public class.
  # "D101",
  # # FIXME: Missing docstring in public method.
  # "D102",
  # # Missing docstring in public package.
  # "D104",
  # # FIXME: Missing docstring in __init__
  # "D107",
  # # No blank line allowed after function docstring.
  # "D202",
  # # 1 blank line required between summary line and description.
  # "D205",
  # # First line should end with a period, question mark, or exclamation point.
  # "D415",
]

# [tool.ruff.lint.pydocstyle]
# convention = "google"

[tool.ruff.format]
quote-style = "single"
